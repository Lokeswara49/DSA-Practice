#include<bits/stdc++.h>
using namespace std;

int maxSubArray(vector<int>& nums) {
        int maxSum=INT_MIN;
        int maxSumTillNow=0;
        int originalStartIndex=0;
        int originalEndIndex=0;
        int tempStartIndex=0;
        for(int i=0;i<nums.size();i++){
            maxSumTillNow+=nums[i];
            if(maxSum<maxSumTillNow){
                originalStartIndex=tempStartIndex;              
                originalEndIndex=i;                                 //updating startIndx and  endIndex here
                maxSum=maxSumTillNow;
            }
            //maxSum=max(maxSumTillNow,maxSum);
            if(maxSumTillNow<0){                        
                maxSumTillNow=0;                                      //We donot  carry forward -ve sum. So, we make maxSunTiiNow=0
                tempStartIndex=i+1;                                   //and tempstart  points to next Index as  we start new sum from there
            }
        }

        // for printing the  req subarray
        // cout<<originalStartIndex<<" "<<originalEndIndex<<endl;
        // for(int i=originalStartIndex;i<=originalEndIndex;i++){
        //     cout<<nums[i]<<" ";
        // }
        cout<<endl;
        return maxSum;
}
int main(){
    int n;
    cin>>n;
    vector<int> nums(n);
    for(int i=0;i<n;i++){
        cin>>nums[i];
    }
    cout<<maxSubArray(nums);

}

//Java:
// class Solution {
//     public int maxSubArray(int[] nums) {
//         int max=Integer.MIN_VALUE;
//         int temp=0;
//         for(int i=0;i<nums.length;i++){
//             temp+=nums[i];
//             max=Math.max(temp,max);
//             if(temp<0){
//                 temp=0;
//             }
//         }
//         return max;
//     }
// }
